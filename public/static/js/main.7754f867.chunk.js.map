{"version":3,"sources":["App.js","chatservice.js","Documentation/documentation.js","serviceWorker.js","index.js"],"names":["App","props","handleNewUserMessage","newMessage","console","log","fetch","method","body","JSON","stringify","speech","headers","then","response","ok","json","Error","botResponse","addResponseMessage","setState","user","catch","error","state","className","this","profileAvatar","title","subtitle","Component","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","useStylesforModal","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","rand","Math","round","random","getModalStyle","top","left","transform","handlefile","e","file","formData","FormData","append","axios","url","data","res","handleUpload","target","files","handledocumentation","window","location","button","marginTop","actionsContainer","marginBottom","resetContainer","Boolean","hostname","match","hist","createBrowserHistory","ReactDOM","render","history","path","component","classes","classesforModal","React","useState","modalStyle","open","setOpen","AppBar","style","Toolbar","Typography","variant","Button","color","onClick","Modal","aria-labelledby","aria-describedby","onClose","type","name","onChange","activeStep","setActiveStep","steps","handleNext","prevActiveStep","handleBack","Stepper","orientation","map","label","index","Step","key","StepLabel","StepContent","step","src","height","alt","getStepContent","disabled","length","Paper","square","elevation","document","querySelector","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sWA+DeA,G,kBA1DP,WAAYC,GAAQ,IAAD,8BACrB,4CAAMA,KAOVC,qBAAuB,SAACC,GACtBC,QAAQC,IAAR,gCAAqCF,IACrCG,MAAM,oDAAqD,CAC5DC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACdC,OAASR,IAEhBS,QAAS,CACR,eAAgB,qCAEfC,MAAK,SAAAC,GACF,GAAGA,EAASC,GACZ,OAAOD,EAASE,OAGd,MAAM,IAAIC,MAAM,yBAEpBJ,MAAK,SAAAG,GACHZ,QAAQC,IAAIW,EAAKE,aACdF,EAAKE,aACRC,6BAAmBH,EAAKE,aAC5B,EAAKE,SAAS,CACRC,KAAKL,KAIHG,6BAAmB,mCAGxBG,OAAM,SAACC,GACNnB,QAAQC,IAAI,QAASkB,GACrBJ,6BAAmBI,OArCrB,EAAKC,MAAQ,CAACH,KAAM,IAFC,E,iFAKvBF,6BAAmB,mC,+BAuCnB,OAEE,yBAAKM,UAAU,OACb,kBAAC,SAAD,CACEvB,qBAAsBwB,KAAKxB,qBAC3ByB,cAAe,4DACfC,MAAM,gBACNC,SAAS,uB,GApDDC,cCKZC,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,GAGZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BV,MAAO,CACLO,SAAU,OAIRI,EAAoBP,aAAW,SAAAC,GAAK,MAAK,CAC3CO,MAAO,CACLC,SAAU,WACVC,MAAO,IACPC,gBAAiBV,EAAMW,QAAQC,WAAWL,MAC1CM,OAAQ,iBACRC,UAAWd,EAAMe,QAAQ,GACzBC,QAAShB,EAAMK,QAAQ,EAAG,EAAG,QAInC,SAASY,IACL,OAAOC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAiB,GAG1C,SAASC,IACP,IAAMC,EAAM,GAAKL,IACXM,EAAO,GAAKN,IAElB,MAAO,CACLK,IAAI,GAAD,OAAKA,EAAL,KACHC,KAAK,GAAD,OAAKA,EAAL,KACJC,UAAU,cAAD,OAAgBF,EAAhB,eAA0BC,EAA1B,OAIf,SAASE,EAAWC,IAWpB,SAAsBC,GACpBxD,QAAQC,IAAIuD,GACZ,IAAIC,EAAW,IAAIC,SACnBD,EAASE,OAAO,SAASH,GACzBI,IAAM,CACJC,IAAI,0EACJ1D,OAAQ,OACR2D,KAAML,IACLhD,MAAK,SAACsD,GACP/D,QAAQC,IAAI,cAjBd+D,CADWT,EAAEU,OAAOC,MAAM,IAI5B,SAASC,IAEPC,OAAOC,SAAW,kB,iEC9Cd1C,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJQ,MAAO,OAETgC,OAAQ,CACNC,UAAW1C,EAAMK,QAAQ,GACzBD,YAAaJ,EAAMK,QAAQ,IAE7BsC,iBAAkB,CAChBC,aAAc5C,EAAMK,QAAQ,IAE9BwC,eAAgB,CACd7B,QAAShB,EAAMK,QAAQ,QCVPyC,QACW,cAA7BP,OAAOC,SAASO,UAEe,UAA7BR,OAAOC,SAASO,UAEhBR,OAAOC,SAASO,SAASC,MACvB,2DCRN,IAAMC,EAAOC,cAGbC,IAASC,OACL,kBAAC,IAAD,CAAQC,QAASJ,GAChB,kBAAC,IAAD,CAAOK,KAAK,IAAIC,UHyDN,WAEb,IAAMC,EAAU1D,IACV2D,EAAkBnD,IAHa,EAIhBoD,IAAMC,SAAStC,GAA7BuC,EAJ8B,sBAKbF,IAAMC,UAAS,GALF,mBAK9BE,EAL8B,KAKxBC,EALwB,KAerC,OACE,yBAAKtE,UAAWgE,EAAQvD,MACtB,kBAAC8D,EAAA,EAAD,CAAQvD,SAAS,SAASwD,MAAO,CAAEpD,WAAY,cAAeE,UAAW,SACvE,kBAACmD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAK3E,UAAWgE,EAAQ7D,QAE5C,kBAACyE,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAAShC,GAAjC,iBACA,kBAAC8B,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAfb,WACjBR,GAAQ,KAcF,YACA,kBAACS,EAAA,EAAD,CACFC,kBAAgB,qBAChBC,mBAAiB,2BACjBZ,KAAMA,EACNa,QAhBc,WAClBZ,GAAQ,KAiBJ,yBAAKE,MAAOJ,EAAYpE,UAAWiE,EAAgBlD,OACnD,+BAAI,6DAAwC,6BAC3C,gDACA,2BAAOoE,KAAM,OAAOC,KAAO,OAAOC,SAAU,SAACnD,GAAD,OAAOD,EAAWC,MAAY,iCAK7E,kBAAC,EAAD,UG7FD,kBAAC,IAAD,CAAO4B,KAAK,iBAAiBC,UFuDnB,WACb,IAAMC,EAAU1D,IAD8B,EAEV4D,IAAMC,SAAS,GAFL,mBAEvCmB,EAFuC,KAE3BC,EAF2B,KAGxCC,EA/CC,CAAC,4CAA6C,sBAAuB,gCAAiC,yBAiDvGC,EAAa,WACjBF,GAAc,SAAAG,GAAc,OAAIA,EAAiB,MAG7CC,EAAa,WACjBJ,GAAc,SAAAG,GAAc,OAAIA,EAAiB,MAOnD,OACE,yBAAK1F,UAAWgE,EAAQvD,MACtB,kBAACmF,EAAA,EAAD,CAASN,WAAYA,EAAYO,YAAY,YAC1CL,EAAMM,KAAI,SAACC,EAAOC,GAAR,OACT,kBAACC,EAAA,EAAD,CAAMC,IAAKH,GACT,kBAACI,EAAA,EAAD,KAAYJ,GACZ,kBAACK,EAAA,EAAD,KACE,kBAAC1B,EAAA,EAAD,KAjEd,SAAwB2B,GACtB,OAAQA,GACN,KAAK,EACH,OAAO,qIAA0G,6BAA1G,wCACC,6BACA,6BAFD,mDAIC,6BACA,6BALD,0DAQT,KAAK,EACH,OAAO,qEACC,6BACA,6BAFD,0FAKT,KAAK,EACH,OAAQ,kGAEN,6BAAK,6BAFC,iBAIN,6BAAK,6BAJC,gBASV,KAAK,EACH,OAAO,sFAEL,6BAAK,6BACL,yBAAKC,IAAK,4EAA4EC,OAAQ,QAAQC,IAAI,KAC1G,6BAAK,6BAJA,2CAQT,QACE,MAAO,gBA4BcC,CAAeT,IAC5B,yBAAKhG,UAAWgE,EAAQb,kBACtB,6BACE,kBAACyB,EAAA,EAAD,CACE8B,SAAyB,IAAfpB,EACVR,QAASa,EACT3F,UAAWgE,EAAQf,QAHrB,QAOA,kBAAC2B,EAAA,EAAD,CACED,QAAQ,YACRE,MAAM,UACNC,QAASW,EACTzF,UAAWgE,EAAQf,QAElBqC,IAAeE,EAAMmB,OAAS,EAAI,SAAW,gBAQ3DrB,IAAeE,EAAMmB,QACpB,kBAACC,EAAA,EAAD,CAAOC,QAAM,EAACC,UAAW,EAAG9G,UAAWgE,EAAQX,gBAC7C,kBAACqB,EAAA,EAAD,8CACA,kBAACE,EAAA,EAAD,CAAQE,QAtCI,WAClBS,EAAc,IAqCsBvF,UAAWgE,EAAQf,QAAjD,eExGN8D,SAASC,cAAc,UD+GrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/H,MAAK,SAAAgI,GACjCA,EAAaC,kB","file":"static/js/main.7754f867.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Widget, addResponseMessage} from 'react-chat-widget';\r\nimport 'react-chat-widget/lib/styles.css';\r\n\r\nclass App extends Component {\r\n        constructor(props) {\r\n\t\t    super(props);\r\n\t\t    this.state = {user: []};\r\n\t    }\r\n  componentDidMount() {\r\n    addResponseMessage(\"Welcome to this awesome chat!\");\r\n  }\r\n \r\n  handleNewUserMessage = (newMessage) => {\r\n    console.log(`New message incoming! ${newMessage}`);\r\n    fetch('https://chatbot-platform.azurewebsites.net/speech', {\r\n\t\t\tmethod: 'POST',\r\n\t\t\tbody: JSON.stringify({\r\n          speech : newMessage\r\n\t\t\t}),\r\n\t\t\theaders: {\r\n\t\t\t\t\"Content-type\": \"application/json; charset=UTF-8\"\r\n\t\t\t}\r\n\t\t}).then(response => {\r\n        if(response.ok){\r\n        return response.json()\r\n        }\r\n        else{\r\n          throw new Error(\"Something is wrong\");\r\n        }\r\n\t\t\t}).then(json => {\r\n        console.log(json.botResponse);\r\n        if(json.botResponse){\r\n        addResponseMessage(json.botResponse);\r\n\t\t\t\tthis.setState({\r\n          user:json\r\n        });\r\n        }\r\n        else{\r\n            addResponseMessage(\"Please check the config file\");\r\n        }\r\n      })\r\n      .catch((error)=>{\r\n        console.log(\"Error\", error)\r\n        addResponseMessage(error);\r\n      });\r\n      // Now send the message throught the backend API\r\n  }\r\n  render() {\r\n    return (\r\n    \r\n      <div className=\"App\">\r\n        <Widget\r\n          handleNewUserMessage={this.handleNewUserMessage}\r\n          profileAvatar={'https://chatbot-platform.azurewebsites.net/images/bot.png'}\r\n          title=\"First Connect\"\r\n          subtitle=\"Oh My BOT !!!\"\r\n        />\r\n      </div>\r\n    );\r\n  } \r\n}\r\n \r\nexport default App;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport axios from 'axios';\r\nimport App from './App'\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    \r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst useStylesforModal = makeStyles(theme => ({\r\n    paper: {\r\n      position: 'absolute',\r\n      width: 400,\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2, 4, 3),\r\n    },\r\n  }));\r\n\r\nfunction rand() {\r\n    return Math.round(Math.random() * 20) - 10;\r\n  }\r\n  \r\n  function getModalStyle() {\r\n    const top = 50 + rand();\r\n    const left = 50 + rand();\r\n  \r\n    return {\r\n      top: `${top}%`,\r\n      left: `${left}%`,\r\n      transform: `translate(-${top}%, -${left}%)`,\r\n    };\r\n  }\r\n\r\nfunction handlefile(e){\r\n\r\n  let file = e.target.files[0];\r\n  handleUpload(file)\r\n}\r\n\r\nfunction handledocumentation(){\r\n\r\n  window.location = \"./documentation\";\r\n}\r\n\r\nfunction handleUpload(file){\r\n  console.log(file);\r\n  let formData = new FormData();\r\n  formData.append('config',file)\r\n  axios({\r\n    url:'https://chatbot-platform.azurewebsites.net/upload/dialogflow/configfile',\r\n    method: 'POST' ,\r\n    data: formData\r\n  }).then((res) => {\r\n    console.log(\"success\")\r\n  })\r\n}\r\n\r\nexport default function ButtonAppBar() {\r\n\r\n  const classes = useStyles();\r\n  const classesforModal = useStylesforModal();\r\n  const [modalStyle] = React.useState(getModalStyle);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" style={{ background: 'transparent', boxShadow: 'none'}}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n          </Typography>\r\n          <Button color=\"inherit\" onClick={handledocumentation}>Documentation</Button>\r\n          <Button color=\"inherit\" onClick={handleOpen}>Settings</Button>\r\n          <Modal\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\" \r\n        open={open}\r\n        onClose={handleClose}\r\n      >\r\n        <div style={modalStyle} className={classesforModal.paper}>\r\n        <p> <b>DialogFlow Configuration File</b></p><br/>\r\n         <label> Select File </label>\r\n         <input type =\"file\" name = \"file\" onChange={(e) => handlefile(e)}></input><br></br>\r\n        </div>\r\n      </Modal>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <App/>\r\n    </div>  \r\n  );\r\n}\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '90%',\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  actionsContainer: {\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n  resetContainer: {\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction getSteps() {\r\n  return ['Google Dialogflow Setup and Configuration', 'Dialogflow Training', 'Connectivity with Bot Connect', 'Configuration Binding'];\r\n}\r\n\r\nfunction getStepContent(step) {\r\n  switch (step) {\r\n    case 0:\r\n      return <p>1. Please login dialogflow using below-mentioned link and on successful login navigate to the console. <br/> &nbsp;&nbsp; &nbsp; https://dialogflow.com\r\n              <br/>\r\n              <br/>\r\n              2. Create a new agent to start with NLP service.\r\n              <br/>\r\n              <br/>\r\n              3. Copy client key after successful creation of agent.\r\n              </p>\r\n    case 1:\r\n      return <p>1. Create new intent to add utterances.\r\n              <br/>\r\n              <br/>\r\n              2. Save the intents after adding utterances and it will automatically train the agent.\r\n              </p>;\r\n    case 2:\r\n      return  <p>\r\n        1. git clone https://github.com/anantha-marlabs/chatbotComponent.git\r\n        <br/><br/>\r\n        2. npm install\r\n        <br/><br/>\r\n        3. npm start\r\n      </p>\r\n\r\n\r\n    case 3:\r\n      return <p>\r\n        1. Click setting and upload config.js file as per below. \r\n        <br/><br/>\r\n        <img src= 'https://chatbot-platform.azurewebsites.net/images/dialogflow_snippet.png ' height =\"100px\" alt=''></img>\r\n        <br/><br/>\r\n      2. Done. You are ready to use a chatbot\r\n\r\n      </p>\r\n    default:\r\n      return 'Unknown step';\r\n  }\r\n}\r\n\r\nexport default function VerticalLinearStepper() {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const steps = getSteps();\r\n\r\n  const handleNext = () => {\r\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setActiveStep(0);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\r\n        {steps.map((label, index) => (\r\n          <Step key={label}>\r\n            <StepLabel>{label}</StepLabel>\r\n            <StepContent>\r\n              <Typography>{getStepContent(index)}</Typography>\r\n              <div className={classes.actionsContainer}>\r\n                <div>\r\n                  <Button\r\n                    disabled={activeStep === 0}\r\n                    onClick={handleBack}\r\n                    className={classes.button}\r\n                  >\r\n                    Back\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleNext}\r\n                    className={classes.button}\r\n                  >\r\n                    {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </StepContent>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      {activeStep === steps.length && (\r\n        <Paper square elevation={0} className={classes.resetContainer}>\r\n          <Typography>All steps completed - you&apos;re finished</Typography>\r\n          <Button onClick={handleReset} className={classes.button}>\r\n            Reset\r\n          </Button>\r\n        </Paper>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Demo from './chatservice';\r\nimport {createBrowserHistory}  from \"history\";\r\nimport { Route, Router } from \"react-router-dom\";\r\nimport Documentation from './Documentation/documentation';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nconst hist = createBrowserHistory();\r\n\r\n//ReactDOM.render(, document.querySelector('#root'));\r\nReactDOM.render(\r\n    <Router history={hist}>\r\n     <Route path=\"/\" component={Demo}/>\r\n     <Route path=\"/documentation\" component={Documentation}/>\r\n    </Router>,\r\n    document.querySelector('#root'));\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}